-- Query to retrieve evidence of admin user activity from SQL Server logs
SELECT 
    CASE WHEN l.event_data.exist('(/EVENT_INSTANCE/ObjectType)[1]') = 1 
         THEN l.event_data.value('(/EVENT_INSTANCE/ObjectType)[1]', 'nvarchar(255)') 
         ELSE NULL 
    END AS ObjectType,
    CASE WHEN l.event_data.exist('(/EVENT_INSTANCE/ObjectName)[1]') = 1 
         THEN l.event_data.value('(/EVENT_INSTANCE/ObjectName)[1]', 'nvarchar(255)') 
         ELSE NULL 
    END AS ObjectName,
    CASE WHEN l.event_data.exist('(/EVENT_INSTANCE/EventType)[1]') = 1 
         THEN l.event_data.value('(/EVENT_INSTANCE/EventType)[1]', 'nvarchar(255)') 
         ELSE NULL 
    END AS EventType,
    CASE WHEN l.event_data.exist('(/EVENT_INSTANCE/LoginName)[1]') = 1 
         THEN l.event_data.value('(/EVENT_INSTANCE/LoginName)[1]', 'nvarchar(255)') 
         ELSE NULL 
    END AS LoginName,
    CASE WHEN l.event_data.exist('(/EVENT_INSTANCE/DatabaseName)[1]') = 1 
         THEN l.event_data.value('(/EVENT_INSTANCE/DatabaseName)[1]', 'nvarchar(255)') 
         ELSE NULL 
    END AS DatabaseName,
    CASE WHEN l.event_data.exist('(/EVENT_INSTANCE/TSQLCommand/CommandText)[1]') = 1 
         THEN l.event_data.value('(/EVENT_INSTANCE/TSQLCommand/CommandText)[1]', 'nvarchar(max)') 
         ELSE NULL 
    END AS CommandText,
    l.event_data,
    l.timestamp
FROM sys.fn_xe_file_target_read_file('system_health*.xel', NULL, NULL, NULL) AS f
CROSS APPLY (SELECT CAST(f.event_data AS XML) AS event_data, f.timestamp) AS l
WHERE l.event_data.exist('(/EVENT_INSTANCE/LoginName)[1]') = 1
AND l.event_data.value('(/EVENT_INSTANCE/LoginName)[1]', 'nvarchar(255)') IN (
    SELECT name FROM sys.server_principals WHERE is_disabled = 0 AND type IN ('S', 'U', 'G')
    AND IS_SRVROLEMEMBER('sysadmin', name) = 1
)
ORDER BY l.timestamp DESC;

-- Query for SQL Server audit logs
SELECT 
    a.name AS audit_name,
    af.name AS file_name,
    s.name AS specification_name,
    d.audit_action_name,
    d.statement,
    d.database_name,
    d.schema_name,
    d.object_name,
    d.server_principal_name,
    d.database_principal_name,
    d.target_server_principal_name,
    d.target_database_principal_name,
    d.event_time,
    d.session_server_principal_name,
    d.server_instance_name,
    d.additional_information
FROM sys.fn_get_audit_file(
    (SELECT TOP 1 audit_file_path FROM sys.dm_server_audit_status),
    DEFAULT,
    DEFAULT) d
JOIN sys.server_audits a ON a.audit_guid = d.audit_guid
JOIN sys.server_file_audits af ON af.audit_id = a.audit_id
LEFT JOIN sys.server_audit_specifications s ON s.audit_guid = d.audit_guid
WHERE d.server_principal_name IN (
    SELECT name FROM sys.server_principals WHERE is_disabled = 0 AND type IN ('S', 'U', 'G')
    AND IS_SRVROLEMEMBER('sysadmin', name) = 1
)
ORDER BY d.event_time DESC;

-- Query for login audit information from default trace
SELECT 
    CONVERT(DATETIME, SWITCHOFFSET(CONVERT(DATETIMEOFFSET, t.StartTime), DATENAME(TzOffset, SYSDATETIMEOFFSET()))) AS EventTime,
    t.TextData AS SQLQuery,
    t.LoginName,
    t.ServerName,
    t.DatabaseName,
    t.NTUserName,
    t.ClientProcessID,
    t.ApplicationName,
    t.EventClass,
    t.ObjectName,
    t.HostName
FROM sys.fn_trace_gettable(
    (SELECT TOP 1 path FROM sys.traces WHERE is_default = 1),
    DEFAULT
) AS t
WHERE t.LoginName IN (
    SELECT name FROM sys.server_principals WHERE is_disabled = 0 AND type IN ('S', 'U', 'G')
    AND IS_SRVROLEMEMBER('sysadmin', name) = 1
)
AND t.EventClass IN (14, 15, 20, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111)
ORDER BY t.StartTime DESC;

-- Get information on security-related configuration settings
SELECT name, value, value_in_use, description 
FROM sys.configurations 
WHERE name IN (
    'default trace enabled',
    'c2 audit mode',
    'common criteria compliance enabled'
)
ORDER BY name;

-- Get information about logon trigger auditing
SELECT 
    tr.name AS trigger_name,
    tr.object_id,
    tr.create_date,
    tr.modify_date,
    OBJECT_DEFINITION(tr.object_id) AS trigger_definition
FROM sys.server_triggers tr
WHERE is_disabled = 0
ORDER BY tr.name;